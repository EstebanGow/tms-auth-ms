name: Main Flow
on:
    push:
        branches:
            - 'main'

env:
    SERVICE_NAME: tms-auth-ms
    PROJECT_ID: ${{ secrets.PROJECT_ID }}
    REGION: us-central1
    ENV_FILE: env/main.env
    ENV: dev
    HOST: localhost
    MEMORY: 512Mi
    CPU: 1
    ALLOW_UNAUTHENTICATED: true
    DOMAIN: tms
    SUB_DOMAIN: example
jobs:
    build_and_deploy:
        runs-on: ubuntu-latest
        name: Build and deploy
        outputs:
            url: ${{ steps.extract_url.outputs.url }}
            branch: ${{ steps.extract_branch.outputs.branch }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Extract branch name
              shell: bash
              run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
              id: extract_branch
            - name: Cache node modules
              uses: actions/cache@v3
              with:
                  path: '**/node_modules'
                  key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
            - name: Install and Build
              uses: ./.github/actions/build
            - name: Build tests
              uses: ./.github/actions/quality
            - name: Create ENV File
              run: |
                mkdir -p env
                echo "PROJECT_ID=${{ env.PROJECT_ID }}" >> ${{ env.ENV_FILE }}
                echo "SERVICE_NAME=${{ env.SERVICE_NAME }}" >> ${{ env.ENV_FILE }}
                echo "HOST=${{ env.HOST }}" >> ${{ env.ENV_FILE }}
                echo "DOMAIN=${{ env.DOMAIN }}" >> ${{ env.ENV_FILE }}
                echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> ${{ env.ENV_FILE }}
                echo "ENV=dev" >> ${{ env.ENV_FILE }}
                echo "PG_PORT=${{ secrets.PG_PORT }}" >> ${{ env.ENV_FILE }}
                echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ${{ env.ENV_FILE }}
                echo "POSTGRES_PASS=${{ secrets.POSTGRES_PASS }}" >> ${{ env.ENV_FILE }}
                echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> ${{ env.ENV_FILE }}
                echo "PREFIX_LOGGER=cm" >> ${{ env.ENV_FILE }}
                echo "LOGGER_LEVEL=debug" >> ${{ env.ENV_FILE }}
                echo "PORT=8080" >> ${{ env.ENV_FILE }}
                echo "VERSION=v1" >> ${{ env.ENV_FILE }}
                echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ${{ env.ENV_FILE }}
                cp ${{ env.ENV_FILE }} .env
            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v1
              with:
                  install_components: 'gke-gcloud-auth-plugin'
                  
            - name: Write service account key to file
              run: echo '${{ secrets.GCP_SA_KEY }}' > ${{ github.workspace }}/gcp-key.json
              
            - name: Authenticate with Google Cloud
              run: |
                gcloud auth activate-service-account --key-file=${{ github.workspace }}/gcp-key.json
                gcloud config set project ${{ env.PROJECT_ID }}
                gcloud auth configure-docker
              env:
                GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json
                
            - name: Verificar permisos
              run: |
                echo "Verificando permisos de la cuenta de servicio actual..."
                CUENTA_SERVICIO=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
                echo "Cuenta de servicio activa: $CUENTA_SERVICIO"
              env:
                GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json
                CLOUDSDK_CORE_PROJECT: ${{ env.PROJECT_ID }}
                
            - name: Build y push de Docker
              run: |
                echo "Construyendo imagen Docker localmente..."
                # Autenticar Docker con Google Container Registry
                gcloud auth configure-docker --quiet
                
                # Construir y enviar la imagen directamente con Docker
                docker build -t gcr.io/${{ env.PROJECT_ID }}/esteban-${{ env.SERVICE_NAME }}:${{ github.sha }} .
                docker push gcr.io/${{ env.PROJECT_ID }}/esteban-${{ env.SERVICE_NAME }}:${{ github.sha }}
                
                echo "Verificando que la imagen existe..."
                gcloud container images describe gcr.io/${{ env.PROJECT_ID }}/esteban-${{ env.SERVICE_NAME }}:${{ github.sha }}
              env:
                GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json
                CLOUDSDK_CORE_PROJECT: ${{ env.PROJECT_ID }}
                
            - name: Deploy to Cloud Run
              run: |
                echo "Preparando variables de entorno desde ${{ env.ENV_FILE }} para Cloud Run..."
                
                ENV_VARS=$(grep -v '^#' ${{ env.ENV_FILE }} | grep -v "^PORT=" | tr '\n' ',' | sed 's/,$//')
                
                echo "Desplegando a Cloud Run con variables de entorno..."
                gcloud run deploy esteban-$SERVICE_NAME \
                  --image gcr.io/${{ env.PROJECT_ID }}/esteban-${{ env.SERVICE_NAME }}:${{ github.sha }} \
                  --allow-unauthenticated \
                  --region $REGION \
                  --max-instances 2 \
                  --platform managed \
                  --timeout 5m \
                  --cpu 1 \
                  --memory 512Mi \
              env:
                GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json
                CLOUDSDK_CORE_PROJECT: ${{ env.PROJECT_ID }}
                
            - name: Get URL Cloud Run
              shell: bash
              run: echo "url=$(gcloud run services describe esteban-$SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')" >> $GITHUB_OUTPUT
              id: extract_url